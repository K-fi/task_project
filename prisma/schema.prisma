// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  role      AccessLevel @default(USER)
  image     String?

  // Task Relationships
  assignedTasks  Task[]      @relation("AssignedTasks")
  createdTasks   Task[]      @relation("CreatedTasks")
  submissionLogs SubmissionLog[]

  // Supervision
  supervisedBy   User[]      @relation("UserSupervision")  // Their supervisors
  supervising    User[]      @relation("UserSupervision")  // Their interns

  // Progress Logs
  progressLogs   ProgressLog[]

  onboardingCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(LOW)
  dueDate     DateTime
  startDate   DateTime
  submission String?

  // Relationships
  assignee    User?      @relation("AssignedTasks", fields: [assignedId], references: [id], onDelete: SetNull)
  assignedId  String?
  creator     User       @relation("CreatedTasks", fields: [creatorId], references: [id])
  creatorId   String
  submissionLogs SubmissionLog[]  // REMOVE onDelete: Cascade from here
  

  attachments File[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SubmissionLog {
  id           String   @id @default(uuid())
  content      String   // e.g., link or description
  submittedAt  DateTime @default(now())

  // Relationships - ADD onDelete: Cascade HERE (correct placement)
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String

  submittedBy  User     @relation(fields: [userId], references: [id])
  userId       String
}

model ProgressLog {
  id          String   @id @default(uuid())
  title       String   // User-supplied title
  description String
  hoursWorked Float
  date        DateTime @default(now())
  
  // Store task title directly instead of foreign key relation
  taskTitle   String?  // Task title (copied from task, no relation)
  taskId      String?  // Optional reference, but no foreign key constraint
  
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


enum AccessLevel {
  USER
  INTERN
  SUPERVISOR
}

enum TaskStatus {
  TODO
  COMPLETED
  LATE
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum FileType {
  IMAGE
  PDF
}

model File {
  id String @id @default(uuid())
  name String
  url String
  size Int
  type FileType

  taskId String?
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

